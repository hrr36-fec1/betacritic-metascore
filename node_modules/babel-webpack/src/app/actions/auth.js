import {Config, CognitoIdentityCredentials} from "aws-sdk";
import {
  CognitoUserPool,
  CognitoUserAttribute,
  CognitoUser,
  AuthenticationDetails
} from "amazon-cognito-identity-js";
import axios from 'axios';

import { AUTH_USER, AUTH_ERROR, UNAUTH_USER,
  REQUEST_STARTED } from './types'

import appConfig from "./../config";

Config.region = appConfig.region;
Config.credentials = new CognitoIdentityCredentials({
  IdentityPoolId: appConfig.IdentityPoolId
});

const userPool = new CognitoUserPool({
  UserPoolId: appConfig.UserPoolId,
  ClientId: appConfig.ClientId,
});


export function expiredToken(){
  const exp = localStorage.getItem('expiration');
  if(exp != null){
    let duration = new Date(exp);
    duration.setHours(duration.getHours()+1);
    return Date.now() > duration;
  } else {
    return true;
  }
}

export function updateUser() {
  const userData = {
    Username: "eumesmoallan",
    Pool: userPool
  };
  const cognitoUser = new CognitoUser(userData);

  cognitoUser.getUserAttributes(function(err, result) {
    if (err) {
        alert(err);
        return;
    }
    console.log(result);

    //for (let i = 0; i < result.length; i++) {
    //    console.log('attribute ' + result[i].getName() + ' has value ' + result[i].getValue());
    //}
  });
}


export function signinUser({ email, password }) {
  const userData = {
    Username: email,
    Pool: userPool
  };
  const authenticationData = {
    Username: email,
    Password: password,
  };

  const authenticationDetails = new AuthenticationDetails(authenticationData)
  return function(dispatch) {
    dispatch({type : REQUEST_STARTED});
    const cognitoUser = new CognitoUser(userData);
    cognitoUser.authenticateUser(authenticationDetails, {
        onSuccess: function (result) {
            const token = result.getIdToken().getJwtToken();
            localStorage.setItem('token',token);
            localStorage.setItem('expiration',(new Date()).toJSON());
            localStorage.setItem('username',email);

            cognitoUser.getUserAttributes(function(err, result) {
              if (err) {
                  console.log(err);
                  return;
              }
              const tipo = result.find((item) => {
                return item.Name === "custom:tipo";
              });
              localStorage.setItem('tipo',tipo.Value);
              dispatch({type: AUTH_USER, payload: tipo.Value})
            });
        },
        onFailure: function(err) {
            dispatch({type: AUTH_ERROR, payload: err});
        },
    });
  }
}

export function signoutUser() {
  return {
    type: UNAUTH_USER
  };
}

export function signupUser({email, password}) {
  const attributeList = [
    new CognitoUserAttribute({
      Name: 'email',
      Value: email,
    })
  ];
  return function(dispatch) {
    userPool.signUp(email, password, attributeList, null, (err, result) => {
      if (err) {
        console.log(err);
        dispatch({type: AUTH_ERROR, dispatch: err});
      }
      console.log('user name is ' + result.user.getUsername());
      console.log('call result: ', result);
      dispatch({type: AUTH_USER});
    });
  }
}
